node {
    stage('checkout') {
    	echo "===========================checking out the code==================================================="
	 	git url: 'https://github.com/mailtorajit/calculatorexample.git'
		echo 'checkedout the code'
	}
	
	stage('Reading the variables from the file')
    {  
        properties = new Properties()
        File propertiesFile = new File("${env.WORKSPACE}"+"/jenkins.properties")
        properties.load(propertiesFile.newDataInputStream())
		echo 'Loaded data from the file'
	 	File FileContents = new File("${env.WORKSPACE}"+"/.git/refs/remotes/origin/master")
	 	def Revision_Number=FileContents.text.substring(0,7)
	 	Version_Number=properties.Major_Version+'.'+properties.Minor_Version+'.'+Revision_Number+'.'+env.BUILD_NUMBER+'-SNAPSHOT'
	 	echo "$Version_Number"
	 	executeCommand("mvn -e versions:set -DnewVersion=$Version_Number")
	 	echo "================================================================================================="
	}
	
	stage('clean project'){
		echo "=============================cleaning the project======================================================="
		executeCommand("mvn clean")
		echo "================================================================================================="
	}
	if(params.mavenCompile){
	stage('compile'){
		echo "==============================compiling the project================================================="
		executeCommand("mvn compile")    	
		echo "================================================================================================="
	}
	}
	if(params.mavenTest){
	stage('test execute'){
		echo "==============================Exceuting the tests================================================="
		executeCommand("mvn test -Dmaven.compile.skip=true")		    
		echo "================================================================================================="
	}
	}
	if(params.qualityGateCheck){
	    stage('SonarQube analysis') {
		echo "================================================================================================="
       	def scannerHome = tool 'My SonarQube Server';
		//https://blog.sonarsource.com/breaking-the-sonarqube-analysis-with-jenkins-pipelines/
     	withSonarQubeEnv('SonarQube Scanner') {
     	if(isUnix()){
    		sh "${scannerHome}/bin/sonar-scanner"
    	}
    	else{
			bat "${scannerHome}/bin/sonar-scanner.bat"
		}
        
        echo "=================================================================================================" 
    	}
	}
	
	sleep(10)
	 stage("SonarQube Quality Gate") {
	 	echo "=================================================================================================" 
        timeout(time: 30, unit: 'MINUTES') { 
           def qg = waitForQualityGate() 
           if (qg.status != 'OK') {
             error "Pipeline aborted due to quality gate failure: ${qg.status}"
           }
        }
        echo "================================================================================================="
    }
    
    stage('publish test results'){
    	echo "===========================Publishing the results============================================="
	  	step([$class: 'JacocoPublisher',
      	execPattern:'**/target/coverage-reports/*.exec',
      	classPattern: '**/classes',
      	sourcePattern: '**/src/main/java'])
      	echo "================================================================================================="
	}
	}

	
	if(params.mavenDeploy){
   	stage('Upload Artifactory') {
    	echo "=========================Deploying the project========================================================"
    	
 		executeCommand("mvn package -Dmaven.compile.skip=true -Dmaven.test.skip=true")
	  	echo "$Version_Number"
	  	JarFile="calculator-unit-test-example-java-"+Version_Number+".jar"
	  	FilePath1="target/"+JarFile
	  
	  	echo "$FilePath1"
      	executeCommand("curl -v -u $properties.NexUser:$nexusPass --upload-file $FilePath1 $properties.NexusRepo$Version_Number/$JarFile")
 		
	  	echo "#####################################Nexus upload for build $properties.Major_Version.$properties.Minor_Version.${BUILD_NUMBER} is successful#####################################"
      	echo "================================================================================================="
	}

	stage("Deploy the project to tomcat"){
	  	executeCommand("ruby sshconn.rb $JarFile $properties.NexusRepo$Version_Number/$JarFile")
	}
	}
	stage('notify'){
	 notifySuccessful();
	}
	
}

def notifySuccessful() {
   emailext (
       subject: "Jenkins job :: ${env.JOB_NAME} - ${env.BUILD_NUMBER} : "+currentBuild,
       body: """<p>Jenkins job :: ${env.JOB_NAME} - [${env.BUILD_NUMBER}]</p>
         <p>Check console output at <a href="${env.BUILD_URL}">${env.JOB_NAME} [${env.BUILD_NUMBER}]</a></p>""",
       to: "rajkumar.surabhi640@gmail.com", attachLog: true
     )
 }
 
 def executeCommand(String command){
	if(isUnix()){
    		sh command
    	}
    	else{
			bat command
		}
 }

 def Version_Number
 def FilePath1
 def JarFile